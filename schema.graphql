enum WeightFunctionType {
  LINEAR
  EXPONENTIAL
}

enum CollectionType {
  ERC721
  ERC1155
}

# General state of a cToken market
type CTokenMarket @entity(immutable: false) {
  id: ID! # cToken address
  decimals: Int! # Number of decimals for the underlying asset
  totalSupply: BigInt! # Total supply of this cToken
  totalBorrows: BigInt! # Total borrows of the underlying asset
  totalReserves: BigInt! # Total reserves of the underlying asset
  exchangeRate: BigInt!
  interestAccumulated: BigInt! # Total interest accumulated in this market
  cashPrior: BigInt! # Cash available in the market before the last transaction
  collateralFactor: BigInt!
  borrowIndex: BigInt!
  lastExchangeRateTimestamp: Timestamp! # Timestamp of the last exchange rate update
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

# Represents a rewards vault, which is Collection vault contract
type Vault @entity(immutable: false) {
  id: ID! # Vault address
  cTokenMarket: CTokenMarket! # The cToken market this vault is associated with
  totalShares: BigInt! # Total shares issued by this vault
  totalDeposits: BigInt! # Total amount of underlying asset deposited in this vault
  totalCTokens: BigInt! # Total cTokens issued by this vault
  collections: [CollectionVault!]! @derivedFrom(field: "vault")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "vault")
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

type Account @entity(immutable: false) {
  id: ID! # User address
  totalSecondsClaimed: BigInt!
  Markets: [AccountMarket!]! @derivedFrom(field: "account") # User's market state across all cToken markets
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "account")
  accountRewards: [AccountRewardsPerCollection!]! @derivedFrom(field: "account") # Detailed reward state per collection-vault
}

type RewardClaim @entity(immutable: true) {
  id: ID! # Transaction hash + log index
  account: Account!
  vault: Vault!
  collection: Collection! # Address of the collection for which reward was claimed
  seconds: BigInt! # Total reward seconds accrued for this claim
  nonce: BigInt! # User's nonce for claims from this vault and collection
  amount: BigInt! # Total reward amount claimed
  blockNumber: BigInt!
  blockTimestamp: Timestamp!
  transactionHash: Bytes!
}

type Collection @entity(immutable: false) {
  id: ID! # Collection address
  name: String!
  symbol: String!
  totalNFTs: BigInt! # Total number of NFTs in this collection (overall)
  collectionType: CollectionType!
  vaults: [CollectionVault!]! @derivedFrom(field: "collection") # All vaults this collection is configured in
  claims: [RewardClaim!]! @derivedFrom(field: "collection") # All claims related to this collection
}

# Represents a collection's reward configuration and deposit/market state within a specific Vault
type CollectionVault @entity(immutable: false) {
  id: ID! # Composite ID, e.g., vault.id + "-" + collection.id
  collection: Collection!
  vault: Vault! # The specific vault this configuration and state applies to
  principalShares: BigInt! # Total shares of this collection in this vault (e.g., cTokens)
  principalDeposited: BigInt! # Total amount of underlying asset deposited for this collection in this vault
  cTokenAmount: BigInt! # Total cTokens issued for this collection in this vault
  isBorrowBased: Boolean! # True if rewards are based on borrow activity, false if deposit based
  rewardSharePercentage: Int! # Percentage of rewards allocated to this collection (e.g., 10000 = 100%)
  fnType: WeightFunctionType! # Type of weighting function (LINEAR or EXPONENTIAL)
  p1: BigInt! # Parameter 1 for the weighting function
  p2: BigInt! # Parameter 2 for the weighting function
  secondsAccumulated: BigInt! # Total "reward seconds" accumulated for this collection in this vault
  secondsClaimed: BigInt! # Total "reward seconds" claimed for this collection in this vault
  totalRewards: BigInt! # Total rewards distributed for this collection in this vault
  totalRewardsClaimed: BigInt! # Total rewards claimed for this collection in this vault
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

# Tracks an account's specific reward accrual state for a CollectionVault configuration
type AccountRewardsPerCollection @entity(immutable: false) {
  id: ID! # Composite ID, e.g., account.id + "-" + collectionVault.id
  account: Account!
  vault: Vault!
  collection: Collection!
  accountMarket: AccountMarket! # Link to the user's market state for this collection in this vault
  collectionVault: CollectionVault! # Link to the specific collection-vault configuration and state
  balanceNFT: BigInt! # User's NFT balance relevant for calculating rewards for this CollectionVault
  seconds: BigInt! # User's accrued "reward seconds" for this specific CollectionVault
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

type AccountMarket @entity(immutable: false) {
  id: ID! # Composite ID, e.g., account.id + "-" + cTokenMarket.id
  account: Account!
  cTokenMarket: CTokenMarket!
  deposit: BigInt! # Total amount of underlying asset deposited by the user in this market
  borrow: BigInt! # Total amount of underlying asset borrowed by the user in this market
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}
