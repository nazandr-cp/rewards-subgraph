enum WeightFunctionType {
  LINEAR
  EXPONENTIAL
}

enum CollectionType {
  ERC721
  ERC1155
}

# General state of a cToken market
type CTokenMarket @entity(immutable: false) {
  id: ID!
  decimals: Int!
  totalSupply: BigInt!
  totalBorrows: BigInt!
  totalReserves: BigInt!
  exchangeRate: BigInt!
  interestAccumulated: BigInt!
  cashPrior: BigInt!
  collateralFactor: BigInt!
  borrowIndex: BigInt!
  lastExchangeRateTimestamp: Timestamp!
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

# Represents a rewards vault, which is Collection vault contract
type Vault @entity(immutable: false) {
  id: ID!
  cTokenMarket: CTokenMarket!
  totalShares: BigInt!
  totalDeposits: BigInt!
  totalCTokens: BigInt!
  globalDepositIndex: BigInt!
  totalPrincipalDeposited: BigInt!
  collections: [CollectionVault!]! @derivedFrom(field: "vault")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "vault")
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

type Account @entity(immutable: false) {
  id: ID!
  totalSecondsClaimed: BigInt!
  Markets: [AccountMarket!]! @derivedFrom(field: "account")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "account")
  accountRewards: [AccountRewardsPerCollection!]! @derivedFrom(field: "account")
  subsidies: [Subsidy!]! @derivedFrom(field: "user")
}

type RewardClaim @entity(immutable: true) {
  id: ID!
  account: Account!
  vault: Vault!
  collection: Collection!
  seconds: BigInt!
  nonce: BigInt!
  amount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: Timestamp!
  transactionHash: Bytes!
}

type Collection @entity(immutable: false) {
  id: ID!
  name: String!
  symbol: String!
  totalNFTs: BigInt!
  collectionType: CollectionType!
  vaults: [CollectionVault!]! @derivedFrom(field: "collection")
  claims: [RewardClaim!]! @derivedFrom(field: "collection")
}

# Represents a collection's reward configuration and deposit/market state within a specific Vault
type CollectionVault @entity(immutable: false) {
  id: ID!
  collection: Collection!
  vault: Vault!
  principalShares: BigInt!
  principalDeposited: BigInt!
  totalCTokens: BigInt!
  globalDepositIndex: BigInt!
  lastGlobalDepositIndex: BigInt!
  yieldAccrued: BigInt!
  isBorrowBased: Boolean!
  rewardSharePercentage: Int!
  fnType: WeightFunctionType!
  p1: BigInt!
  p2: BigInt!
  secondsAccumulated: BigInt!
  secondsClaimed: BigInt!
  totalRewards: BigInt!
  totalRewardsClaimed: BigInt!
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

# Tracks an account's specific reward accrual state for a CollectionVault configuration
type AccountRewardsPerCollection @entity(immutable: false) {
  id: ID!
  account: Account!
  vault: Vault!
  collection: Collection!
  accountMarket: AccountMarket!
  collectionVault: CollectionVault!
  balanceNFT: BigInt!
  seconds: BigInt!
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

type AccountMarket @entity(immutable: false) {
  id: ID!
  account: Account!
  cTokenMarket: CTokenMarket!
  deposit: BigInt!
  borrow: BigInt!
  updatedAtBlock: BigInt!
  updatedAtTimestamp: Timestamp!
}

enum EpochStatus {
  ACTIVE
  PROCESSING
  COMPLETED
  FAILED
}

type Epoch @entity(immutable: false) {
  id: ID!
  startTimestamp: BigInt!
  endTimestamp: BigInt!
  processingStartedTimestamp: BigInt
  totalYieldAvailable: BigInt!
  totalSubsidiesDistributed: BigInt!
  status: EpochStatus!
  eligibleUsers: BigInt!
  subsidyTransactions: [SubsidyTransaction!]! @derivedFrom(field: "epoch")
  vaultAllocations: [EpochVaultAllocation!]! @derivedFrom(field: "epoch")
  subsidies: [Subsidy!]! @derivedFrom(field: "epoch")
}

type SubsidyTransaction @entity(immutable: true) {
  id: ID!
  epoch: Epoch!
  user: Account!
  collection: Collection!
  vault: Vault!
  subsidyAmount: BigInt!
  borrowAmountBefore: BigInt!
  borrowAmountAfter: BigInt!
  gasUsed: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type Subsidy @entity(immutable: true) {
  id: ID!
  epoch: Epoch!
  user: Account!
  amount: BigInt!
  txHash: Bytes!
  timestamp: BigInt!
}

type EpochVaultAllocation @entity(immutable: false) {
  id: ID!
  epoch: Epoch!
  vault: Vault!
  yieldAllocated: BigInt!
  subsidiesDistributed: BigInt!
  remainingYield: BigInt!
}

type UserEpochEligibility @entity(immutable: false) {
  id: ID!
  user: Account!
  epoch: Epoch!
  collection: Collection!
  nftBalance: BigInt!
  borrowBalance: BigInt!
  subsidyReceived: BigInt!
  isEligible: Boolean!
}

type TrustedSignerUpdate @entity(immutable: true) {
  id: ID!
  oldSigner: Bytes!
  newSigner: Bytes!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type YieldBatchRepayment @entity(immutable: true) {
  id: ID!
  epochId: BigInt!
  totalYieldRepaid: BigInt!
  remainingYield: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionYieldAccrual @entity(immutable: true) {
  id: ID!
  collection: Collection!
  yieldAmount: BigInt!
  globalDepositIndex: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

type CollectionYieldApplication @entity(immutable: true) {
  id: ID!
  epochId: BigInt!
  collection: Collection!
  yieldApplied: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
  transactionHash: Bytes!
}

# Singleton entity to store system-wide state, like the current active epoch
type SystemState @entity(immutable: false) {
  id: ID!
  activeEpochId: String
}
