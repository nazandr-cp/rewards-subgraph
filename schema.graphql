enum WeightFunctionType {
  LINEAR
  EXPONENTIAL
}

enum CollectionType {
  ERC721
  ERC1155
}

type CTokenMarket @entity(immutable: false) {
  id: ID! @id
  underlyingAsset: Bytes!
  underlyingAssetSymbol: String!
  underlyingDecimals: Int!
  totalSupply: BigInt!
  totalBorrows: BigInt!
  totalReserves: BigInt!
  exchangeRate: BigInt!
  collateralFactor: BigInt!
  borrowIndex: BigInt!
  lastAccrualTimestamp: Timestamp!
  blockTimestamp: Timestamp!
}

type Vault @entity(immutable: false) {
  id: ID! @id
  CTokenMarket: CTokenMarket! # Assuming this is the intended link, or should it be cTokenAddress? For now, keeping as is.
  rewardPerBlock: BigInt!
  globalRPW: BigInt!
  totalWeight: BigInt!
  lastUpdateBlock: BigInt!
  weightByBorrow: Boolean!
  useExp: Boolean!
  linK: BigInt!
  expR: BigInt!
  collections: [CollectionVault!]! @derivedFrom(field: "vault")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "vault")
}

type Account @entity(immutable: false) {
  id: ID! @id
  totalSecondsClaimed: BigInt!
  Collections: [AccountCollection!]! @derivedFrom(field: "account")
  Vaults: [AccountVault!]! @derivedFrom(field: "account")
  rewardClaims: [RewardClaim!]! @derivedFrom(field: "account")
  accountRewards: [AccountRewardsPerCollection!]! @derivedFrom(field: "account")
}

type RewardClaim @entity(immutable: true) {
  id: ID! @id
  account: Account!
  vault: Vault!
  collectionAddress: Bytes!
  amount: BigInt!
  secondsInClaim: BigInt!
  nonce: BigInt!
  secondsUser: BigInt!
  secondsColl: BigInt!
  incRPS: BigInt!
  yieldSlice: BigInt!
  blockNumber: BigInt!
  blockTimestamp: Timestamp!
  transactionHash: Bytes!
}

type CollectionVault @entity(immutable: false) {
  id: ID! @id
  collection: Collection!
  vault: Vault!
  principalDeposit: BigInt!
  isBorrowBased: Boolean!
  fnType: WeightFunctionType!
  p1: BigInt!
  p2: BigInt!
  rewardSharePercentage: Int!
  principalYield: BigInt!
  totalSeconds: BigInt!
}

type AccountCollection @entity(immutable: false) {
  id: ID! @id
  account: Account!
  vault: Vault!
  collection: Collection!
  balanceNFT: BigInt!
  totalSeconds: BigInt!
  rewards: [AccountRewardsPerCollection!]! @derivedFrom(field: "account")
  lastUpdate: Timestamp!
}

type AccountRewardsPerCollection @entity(immutable: false) {
  id: ID! @id
  account: Account!
  vault: Vault!
  collection: Collection!
  seconds: BigInt!
  lastUpdate: Timestamp!
}

type AccountVault @entity(immutable: false) {
  id: ID! @id
  vault: Vault!
  account: Account!
  weight: BigInt!
  rewardDebt: BigInt!
  accrued: BigInt!
  claimable: BigInt!
  collections: [AccountCollection!]! @derivedFrom(field: "accountVault")
}
